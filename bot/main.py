import datetime
from datetime import datetime

import telebot
from telebot import types

import utils
import components
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

user_states = {}
user_tokens = {}
user_rtokens = {}
role = {}
login = {}


@bot.message_handler(commands=["start"])
def start_func(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –¥–ª—è –≤—ã–µ–∑–¥–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–∞–Ω–∫–∞!",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    auth(message.chat.id)


def auth(chat_id):
    bot.send_message(
        chat_id,
        "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n–£–∫–∞–∂–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ —Å–∏—Å—Ç–µ–º–µ:",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    user_states[chat_id] = "waiting_for_login"


def to_go(chat_id):
    if chat_id in role:
        if role[chat_id] == 1:
            go(chat_id)
        elif role[chat_id] == 2:
            go_manager(chat_id)
    else:
        auth(chat_id)


def go(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    btn2 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    markup.add(btn1)
    markup.add(btn2)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


def go_manager(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    btn2 = types.KeyboardButton("–í—Å–µ –∑–∞–¥–∞—á–∏")
    btn3 = types.KeyboardButton("–§–∏–ª–∏–∞–ª—ã")
    btn4 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    markup.row(btn1, btn2)
    markup.add(btn3, btn4)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


def check_role(message):
    if message.chat.id in role:
        if role[message.chat.id] == 1:
            return 1
        elif role[message.chat.id] == 2:
            return 2


@bot.message_handler(func=lambda message: message.text == "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
def show_emps(message):
    if check_role(message) == 1:
        return
    msg = message
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        # TODO: –Ω—É–∂–µ–Ω global –∏–ª–∏ –Ω–µ—Ç?
        user_rtokens[message.chat.id] = None
        user_tokens[message.chat.id] = None
        auth(msg.chat.id)
        return
    response = utils.users_employees_all(curr_token)

    if response.status_code == 200:
        response_data = response.json()
        counter = 0
        text_msg = ""
        bot.send_message(message.chat.id, "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
        for item in response_data["items"]:
            # if item['user']['is_active']==True:
            #     stat = 'üü¢'
            # else:
            #     stat = '‚ö™'
            text_msg += f"*{item['user']['lastname']} {item['user']['firstname']} {item['user']['patronymic']}* ({item['grade']['name']})\nüìç_{item['office']['address']}_\n\n"
            if counter == 10:
                counter = 0
                bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")
                text_msg = ""
            else:
                counter += 1
        if counter != 0:
            bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")

        to_go(msg.chat.id)
    elif (
        response.status_code == 401
        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
    ):
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
        refresh(msg)
        show_emps(msg)
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        to_go(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == "–§–∏–ª–∏–∞–ª—ã")
def show_points(message):
    if check_role(message) == 1:
        return
    msg = message
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        user_rtokens[message.chat.id] = None
        user_tokens[message.chat.id] = None
        auth(msg.chat.id)
        return
    response = utils.offices_all(curr_token)

    if response.status_code == 200:
        response_data = response.json()
        counter = 0
        text_msg = ""
        for item in response_data["items"]:
            text_msg += f"üìç{item['address']}\n\n"
            if counter == 10:
                counter = 0
                bot.send_message(message.chat.id, text_msg)
                text_msg = ""
            else:
                counter += 1
        if counter != 0:
            bot.send_message(message.chat.id, text_msg)

        to_go(msg.chat.id)
    elif (
        response.status_code == 401
        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
    ):
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
        refresh(msg)
        show_emps(msg)
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        to_go(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == "–í—Å–µ –∑–∞–¥–∞—á–∏")
def show_all_tasks(message):
    if check_role(message) == 1:
        return
    msg = message
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        user_rtokens[message.chat.id] = None
        user_tokens[message.chat.id] = None
        auth(msg.chat.id)
        return
    response = utils.tasks()

    if response.status_code == 200:
        response_data = response.json()
        counter = 0
        text_msg = ""
        for num, item in enumerate(response_data["items"]):
            if item["priority"]["value"] == 3:
                emoji_status = "‚ö†Ô∏è"
            else:
                emoji_status = ""
            if (
                item.get("employee")
                and item["employee"].get("user")
                and item["employee"]["user"].get("lastname")
            ):
                emp = f"{item['employee']['user']['lastname']} {item['employee']['user']['firstname']} {item['employee']['user']['patronymic']}"
            else:
                emp = "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            text_msg += f"*–ó–∞–¥–∞—á–∞ #: {item['id']}* ({str(item['status']['name']).lower()}) {emoji_status}\n{item['type']['name']}\n{item['priority']['name']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {emp}\nüìç_{item['point']['address']}_\n\n"
            if counter == 5:
                counter = 0
                bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")
                text_msg = ""
            else:
                counter += 1
        if counter != 0:
            bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")

        btn1 = types.KeyboardButton("–ê—Ä—Ö–∏–≤ –≤—Å–µ—Ö –∑–∞–¥–∞—á")
        markup = components.add_btns(2, [btn1])
        bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)
    elif (
        response.status_code == 401
        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
    ):
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
        refresh(msg)
        show_emps(msg)
    elif (
        response.status_code == 404
        and response.json()["detail"] == "–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    ):
        bot.send_message(message.chat.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞—á –Ω–µ—Ç.")
        btn1 = types.KeyboardButton("–ê—Ä—Ö–∏–≤ –≤—Å–µ—Ö –∑–∞–¥–∞—á")
        markup = components.add_btns(2, [btn1])
        bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        to_go(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
def show_tasks(message):
    if check_role(message) == 2:
        return
    msg = message
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        user_rtokens[message.chat.id] = None
        user_tokens[message.chat.id] = None
        auth(msg.chat.id)
        return
    response = utils.users_profile(curr_token)
    if response.status_code == 200:
        response = utils.tasks_id(response.json()["id"])
        if response.status_code == 200:
            response_data = response.json()
            counter = 0
            text_msg = ""
            for item in response_data["items"]:
                if item["priority"]["value"] == 3:
                    emoji_status = "‚ö†Ô∏è"
                else:
                    emoji_status = ""

                text_msg += f"*–ó–∞–¥–∞—á–∞ #: {item['id']}* {emoji_status}\n{item['type']['name']}\n{item['priority']['name']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\nüìç_{item['point']['address']}_\n\n"
                if counter == 5:
                    counter = 0
                    bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")
                    text_msg = ""
                else:
                    counter += 1
            if counter != 0:
                bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

            btn1 = types.KeyboardButton("–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞")
            markup.row(btn1)
            btn2 = types.KeyboardButton("–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á")
            btn3 = types.KeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")
            markup.row(btn2, btn3)
            bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)
        elif (
            response.status_code == 401
            and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
        ):
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
            refresh(msg)
            show_emps(msg)
        elif (
            response.status_code == 404
            and response.json()["detail"] == "–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        ):
            bot.send_message(message.chat.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞—á –Ω–µ—Ç.")
            btn1 = types.KeyboardButton("–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á")
            markup = components.add_btns(2, [btn1])
            bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)
        else:
            error_data = response.json()
            print(error_data["detail"])

            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            to_go(msg.chat.id)
    elif (
        response.status_code == 401
        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
    ):
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
        refresh(msg)
        get_req_profile(msg)
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        to_go(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == "–ê—Ä—Ö–∏–≤ –≤—Å–µ—Ö –∑–∞–¥–∞—á")
def archieve_all(message):
    if check_role(message) == 1:
        return
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        user_rtokens[message.chat.id] = None
        user_tokens[message.chat.id] = None
        auth(message.chat.id)
        return
    response = utils.tasks_history()
    if response.status_code == 200:
        response_data = response.json()
        counter = 0
        text_msg = ""
        for num, item in enumerate(response_data["items"]):
            if (
                item.get("employee")
                and item["employee"].get("id")
                and item["employee"]["id"].get("lastname")
            ):
                emp = f"{item['employee']['id']['lastname']} {item['employee']['id']['firstname']} {item['employee']['id']['patronymic']}"
            else:
                emp = "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            if item["feedback_value"] == None:
                mark = False
            else:
                mark = True
            if item["feedback_description"] == "":
                review = False
            else:
                review = True
            if item["date_begin"] == None:
                is_dated = False
            else:
                is_dated = True
            text_msg += f"*–ó–∞–¥–∞—á–∞ #: {item['id']}*"
            if is_dated == True:
                text_msg += f"        _{datetime.strptime(item['date_begin'], '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y %H:%M')}_"
            text_msg += f"\n{item['type']['name']}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {emp}"
            if mark == True:
                text_msg += f"\n–û—Ü–µ–Ω–∫–∞: "
                for i in range(int(item["feedback_value"])):
                    text_msg += "‚≠ê"
            if review == True:
                text_msg += f"\n–û—Ç–∑—ã–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: \"{item['feedback_description']}\""
            text_msg += f"\nüìç_{item['point']['address']}_\n\n"
            # text_msg += f"–ó–∞–¥–∞—á–∞ #: {item['id']}\n{item['type']['name']}\n{item['point']['address']}\n{item['priority']['name']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n{item['status']['name']} –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {item['employee']['user']['lastname']} {item['employee']['user']['firstname']} {item['employee']['user']['patronymic']}\n\n"
            if counter == 5:
                counter = 0
                bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")
                text_msg = ""
            else:
                counter += 1
        if counter != 0:
            bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")

        to_go(message.chat.id)

    else:
        error_data = response.json()
        print(error_data["detail"])
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á")
def archieve(message):
    msg = message
    if check_role(message) == 2:
        return
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        user_rtokens[message.chat.id] = None
        user_tokens[message.chat.id] = None
        auth(message.chat.id)
        return
    response = utils.users_profile(curr_token)
    response_res = response.json()["id"]
    if response.status_code == 200:
        response = utils.tasks_history_id(response_res)
        if response.status_code == 200:
            response_data = response.json()
            counter = 0
            text_msg = ""
            for num, item in enumerate(response_data["items"]):
                if item["feedback_value"] == 0 or item["feedback_value"] == None:
                    mark = False
                else:
                    mark = True
                if item["feedback_description"] == "":
                    review = False
                else:
                    review = True
                if item["date_begin"] == None:
                    is_dated = False
                else:
                    is_dated = True
                text_msg += f"*–ó–∞–¥–∞—á–∞ #: {item['id']}*"
                if is_dated == True:
                    text_msg += f"        _{datetime.strptime(item['date_begin'], '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y %H:%M')}_"
                text_msg += f"\n{item['type']['name']}"
                if mark == True:
                    text_msg += f"\n–û—Ü–µ–Ω–∫–∞: "
                    for i in range(int(item["feedback_value"])):
                        text_msg += "‚≠ê"
                if review == True:
                    text_msg += (
                        f"\n–û—Ç–∑—ã–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: \"{item['feedback_description']}\""
                    )
                text_msg += f"\nüìç_{item['point']['address']}_\n\n"
                if counter == 5:
                    counter = 0
                    bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")
                    text_msg = ""
                else:
                    counter += 1
            if counter != 0:
                bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")

            to_go(message.chat.id)

        else:
            error_data = response.json()
            print(error_data["detail"])
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", parse_mode="Markdown")
    elif (
        response.status_code == 401
        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
    ):
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
        refresh(msg)
        get_req_profile(msg)
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        to_go(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == "–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞")
def current_activate(message):
    if check_role(message) == 2:
        return
    current(message)


def current(message):
    if check_role(message) == 2:
        return
    msg = message
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        # TODO: –Ω—É–∂–µ–Ω global –∏–ª–∏ –Ω–µ—Ç?
        user_rtokens[message.chat.id] = None
        user_tokens[message.chat.id] = None
        auth(msg.chat.id)
        return
    response = utils.users_profile(curr_token)
    if response.status_code == 200:
        response = utils.tasks_id(response.json()["id"])

        if response.status_code == 200:
            response_data = response.json()
            counter = 0

            for item in response_data["items"]:
                if item["priority"]["value"] == 3:
                    emoji_status = "‚ö†Ô∏è"
                else:
                    emoji_status = ""
                if item["status"]["id"] == 4:
                    counter = 1
                    text_msg = f"*–ó–∞–¥–∞—á–∞ #: {item['id']}* ({str(item['status']['name']).lower()}) {emoji_status}\n{item['type']['name']}\n{item['priority']['name']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\nüìç_{item['point']['address']}_\n\n"
                    bot.send_message(message.chat.id, text_msg, parse_mode="Markdown")
            if counter == 0:
                bot.send_message(
                    message.chat.id,
                    "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á.\n\n–ü—Ä–∏–º–∏—Ç–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ –í–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ—ë —Ç–µ–∫—É—â–µ–π.",
                    parse_mode="Markdown",
                )
                btn1 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É")
                btn2 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
                markup = components.add_btns(3, [btn1, btn2])
                bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)
            else:
                btn1 = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å")
                btn2 = types.KeyboardButton("–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞")
                markup = components.add_btns(3, [btn1, btn2])
                bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)

    elif (
        response.status_code == 401
        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
    ):
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
        refresh(msg)
        get_req_profile(msg)
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        to_go(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞")
def choose_task(message):
    msg = message
    if check_role(message) == 2:
        return
    user_states[message.chat.id] = "waiting_for_problem"
    bot.send_message(
        message.chat.id, f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=types.ReplyKeyboardRemove()
    )


@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É")
def choose_task(message):
    if check_role(message) == 2:
        return
    user_states[message.chat.id] = "waiting_for_task"
    bot.send_message(
        message.chat.id,
        f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å:",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@bot.message_handler(func=lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å")
def current_compl_t(message):
    msg = message
    if check_role(message) == 2:
        return
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        user_rtokens[message.chat.id] = None
        user_tokens[message.chat.id] = None
        auth(msg.chat.id)
        return
    response = utils.users_profile(curr_token)
    if response.status_code == 200:
        response = utils.tasks_id(response.json()["id"])

        if response.status_code == 200:
            response_data = response.json()
            counter = 0

            for item in response_data["items"]:
                if item["status"]["id"] == 4:
                    counter = 1
                    temp = item["id"]
                    break
            if counter == 0:
                bot.send_message(
                    message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", parse_mode="Markdown"
                )
                to_go(msg.chat.id)
            else:
                response = finish(int(temp), curr_token)
                if response.status_code == 200:
                    bot.send_message(
                        message.chat.id,
                        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏!\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –í–∞—à —Ç—Ä—É–¥!",
                        parse_mode="Markdown",
                    )
                else:
                    error_data = response.json()
                    print(error_data["detail"])

                    bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                to_go(msg.chat.id)
        elif (
            response.status_code == 401
            and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
        ):
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
            refresh(msg)
            show_emps(msg)
        else:
            error_data = response.json()
            print(error_data["detail"])

            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            to_go(msg.chat.id)
    elif (
        response.status_code == 401
        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
    ):
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
        refresh(msg)
        get_req_profile(msg)
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        to_go(msg.chat.id)


def finish(id, token):
    response = utils.complete_task(id, token)
    return response


@bot.message_handler(func=lambda message: message.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
def to_main(message):
    to_go(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
def profile_activate(message):
    get_req_profile(message)


def refresh(message):
    msg = message
    chat_id = message.chat.id
    if chat_id in user_rtokens:
        temp_token = user_rtokens[chat_id]
    else:
        # TODO: –Ω—É–∂–µ–Ω global –∏–ª–∏ –Ω–µ—Ç?
        user_rtokens[chat_id] = None
        user_tokens[chat_id] = None
        auth(msg.chat.id)
        return
    response = utils.auth_refresh_token(temp_token)

    if response.status_code == 200:
        response_data = response.json()
        access_token = response_data["access_token"]
        refresh_token = response_data["refresh_token"]
        user_tokens[message.chat.id] = access_token
        user_rtokens[message.chat.id] = refresh_token
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        auth(msg.chat.id)


def get_req_profile(message):
    msg = message
    if message.chat.id in user_tokens:
        curr_token = user_tokens[message.chat.id]
    else:
        auth(msg.chat.id)
        return

    response = utils.users_profile(curr_token)

    if response.status_code == 200:
        response_data = response.json()
        profile(message, response_data)
    elif (
        response.status_code == 401
        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
    ):
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
        refresh(msg)
        get_req_profile(msg)
    else:
        error_data = response.json()
        print(error_data["detail"])

        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        to_go(msg.chat.id)


def profile(message, rdata):
    bot.send_message(
        message.chat.id,
        f'–§–∞–º–∏–ª–∏—è: {rdata["lastname"]}\n–ò–º—è: {rdata["firstname"]}\n–û—Ç—á–µ—Å—Ç–≤–æ: {rdata["patronymic"]}\nEmail: {rdata["email"]}',
    )
    btn1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    btn2 = types.KeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
    markup = components.add_btns(3, [btn1, btn2])
    bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def edit_profile(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    btn1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é")
    btn2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
    btn3 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ")
    markup = components.add_btns(4, [btn1, btn2, btn3])
    bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
def out_profile(message):
    if message.chat.id in user_tokens:
        user_tokens[message.chat.id] = None
    else:
        print("error")
    bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    return auth(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é")
def edit_profile_surname(message):
    user_states[message.chat.id] = "waiting_for_surname"
    bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
def edit_profile_name(message):
    user_states[message.chat.id] = "waiting_for_name"
    bot.send_message(
        message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove()
    )


@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ")
def edit_profile_patr(message):
    user_states[message.chat.id] = "waiting_for_patr"
    bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ:",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@bot.message_handler(func=lambda message: True)
def login_func(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_states.get(message.chat.id) == "waiting_for_login":
        login[message.chat.id] = message.text
        user_states[message.chat.id] = "waiting_for_password"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–∞—Ä–æ–ª—å:")

    elif user_states.get(message.chat.id) == "waiting_for_password":
        msg = message
        password = message.text
        user_states[message.chat.id] = None
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ!")

        response = utils.auth_signin(login[message.chat.id], password)
        login[message.chat.id] = None

        if response.status_code == 200:
            response_data = response.json()
            access_token = response_data["access_token"]
            refresh_token = response_data["refresh_token"]
            # token_type = response_data['token_type']

            role[message.chat.id] = utils.users_profile(access_token).json()["role_id"]
            bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
            user_tokens[message.chat.id] = access_token
            user_rtokens[message.chat.id] = refresh_token

            to_go(message.chat.id)
        else:
            error_data = response.json()
            print(error_data["detail"])

            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            auth(msg.chat.id)

    elif user_states.get(message.chat.id) == "waiting_for_surname":
        msg = message
        if message.chat.id in user_tokens:
            curr_token = user_tokens[message.chat.id]
        else:
            auth(msg.chat.id)
            return

        response = utils.users_profile(curr_token)
        if response.status_code == 200:
            response = utils.users(
                response.json()["firstname"],
                message.text,
                response.json()["patronymic"],
                curr_token,
            )

            user_states[message.chat.id] = None
            if response.status_code == 200:
                bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.")
                get_req_profile(msg)
            elif (
                response.status_code == 401
                and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
            ):
                bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
                refresh(msg)
                get_req_profile(msg)
            else:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                get_req_profile(msg)
        elif (
            response.status_code == 401
            and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
        ):
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
            refresh(msg)
            get_req_profile(msg)
        else:
            error_data = response.json()
            print(error_data["detail"])

            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            to_go(msg.chat.id)

    elif user_states.get(message.chat.id) == "waiting_for_name":
        msg = message
        if message.chat.id in user_tokens:
            curr_token = user_tokens[message.chat.id]
        else:
            auth(msg.chat.id)
            return

        response = utils.users_profile(curr_token)

        if response.status_code == 200:
            response = utils.users(
                message.text,
                response.json()["lastname"],
                response.json()["patronymic"],
                curr_token,
            )

            user_states[message.chat.id] = None
            if response.status_code == 200:
                bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.")
                get_req_profile(msg)
            elif (
                response.status_code == 401
                and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
            ):
                bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
                refresh(msg)
                get_req_profile(msg)
            else:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                get_req_profile(msg)
        elif (
            response.status_code == 401
            and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
        ):
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
            refresh(msg)
            get_req_profile(msg)
        else:
            error_data = response.json()
            print(error_data["detail"])

            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            to_go(msg.chat.id)

    elif user_states.get(message.chat.id) == "waiting_for_patr":
        msg = message
        if message.chat.id in user_tokens:
            curr_token = user_tokens[message.chat.id]
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            auth(msg.chat.id)
            return

        response = utils.users_profile(curr_token)

        if response.status_code == 200:
            response = utils.users(
                response.json()["firstname"],
                response.json()["lastname"],
                message.text,
                curr_token,
            )

            user_states[message.chat.id] = None
            if response.status_code == 200:
                bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.")
                get_req_profile(msg)
            elif (
                response.status_code == 401
                and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
            ):
                bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
                refresh(msg)
                get_req_profile(msg)
            else:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                get_req_profile(msg)
        elif (
            response.status_code == 401
            and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
        ):
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
            refresh(msg)
            get_req_profile(msg)
        else:
            error_data = response.json()
            print(error_data["detail"])

            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            to_go(msg.chat.id)

    elif user_states.get(message.chat.id) == "waiting_for_task":
        msg = message
        if message.chat.id in user_tokens:
            curr_token = user_tokens[message.chat.id]
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            auth(msg.chat.id)
            return
        user_states[msg.chat.id] = None
        response = utils.accept_task(msg.text, curr_token)
        if response.status_code == 200:
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
            current(msg)
        elif (
            response.status_code == 401
            and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
        ):
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
            refresh(msg)
            get_req_profile(msg)
        else:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            print(response.status_code)
            to_go(msg.chat.id)
    elif user_states.get(message.chat.id) == "waiting_for_problem":
        msg = message
        if message.chat.id in user_tokens:
            curr_token = user_tokens[message.chat.id]
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            auth(msg.chat.id)
            return
        user_states[msg.chat.id] = None

        response = utils.users_profile(curr_token)

        if response.status_code == 200:
            response = utils.tasks_id(response.json()["id"])

            if response.status_code == 200:
                response_data = response.json()
                counter = 0
                for item in response_data["items"]:
                    if item["status"]["id"] == 4:
                        counter = 1
                        temp = item["id"]
                        break
                if counter == 0:
                    bot.send_message(
                        message.chat.id,
                        "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á.\n\n–ü—Ä–∏–º–∏—Ç–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ –í–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ—ë —Ç–µ–∫—É—â–µ–π.",
                        parse_mode="Markdown",
                    )
                    btn1 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É")
                    btn2 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
                    markup = components.add_btns(3, [btn1, btn2])
                    bot.send_message(message.chat.id, "–î–∞–ª–µ–µ...", reply_markup=markup)
                else:
                    response = utils.cancelled(msg.text, curr_token, temp)
                    if response.status_code == 200:
                        bot.send_message(
                            message.chat.id,
                            f"–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ–ø–æ–≤–µ—â—ë–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ.\n–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ —Å–Ω—è—Ç–∞.",
                        )
                        current(msg)
                    elif (
                        response.status_code == 401
                        and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
                    ):
                        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
                        refresh(msg)
                        get_req_profile(msg)
                    else:
                        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                        print(response.status_code)
                        to_go(msg.chat.id)

            elif (
                response.status_code == 401
                and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
            ):
                bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
                refresh(msg)
                show_emps(msg)
            else:
                error_data = response.json()
                print(error_data["detail"])

                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                to_go(msg.chat.id)
        elif (
            response.status_code == 401
            and response.json()["detail"] == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫"
        ):
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º.")
            refresh(msg)
            get_req_profile(msg)
        else:
            error_data = response.json()
            print(error_data["detail"])

            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            to_go(msg.chat.id)
    else:
        bot.send_message(message.chat.id, "–ï—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /start")


if __name__ == "__main__":
    bot.infinity_polling()
